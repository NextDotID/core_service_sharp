@page "/setup"
@using System.ComponentModel.DataAnnotations;
@using CoreService.Shared.Internals;
@using Nethereum.Hex.HexConvertors.Extensions;
@using Nethereum.Signer;
@using Nethereum.UI;
@using System.Text;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject SelectedEthereumHostProviderService selectedHostProviderService

<PageTitle>Setup | Core Service</PageTitle>

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h4">
            Setup
        </MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@CustomIcons.Metamask"
                   OnClick="Connect">
            Connect
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    private IEthereumHostProvider eth = null!;
    private string SelectedAccount { get; set; } = null!;

    protected override void OnInitialized()
    {
        Breadcrumbs.SetItems(new BreadcrumbItem("Setup", "/", true, Icons.Material.Outlined.Lightbulb));
        eth = selectedHostProviderService.SelectedHost;
    }

    protected override async Task OnInitializedAsync()
    {
        await eth.CheckProviderAvailabilityAsync();
    }

    private async Task Connect()
    {
        string subPub;

        try
        {
            using var response = await httpClient.PostAsync("/api/core/generate", null);
            response.EnsureSuccessStatusCode();
            var status = await response.Content.ReadFromJsonAsync<SetupStatus>();
            subPub = status?.SubkeyPublic ?? string.Empty;
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });

            return;
        }

        var message = $"Subkey certification signature: {subPub}";
        string account, sig;

        try
        {
            account = await eth.GetProviderSelectedAccountAsync();
            sig = await eth.SignMessageAsync(message);
        }
        catch (Exception)
        {
            Snackbar.Add("Metamask not working...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });

            return;
        }

        var signer = new EthereumMessageSigner();
        var avatar = EthECKey.RecoverFromSignature(
                MessageSigner.ExtractEcdsaSignature(sig),
                signer.HashPrefixedMessage(Encoding.UTF8.GetBytes(message)))
            .GetPubKey(true)
            .ToHex(true);

        try
        {
            using var response = await httpClient.PostAsJsonAsync("/api/core/setup", new Internal(
                new Subkey(string.Empty, string.Empty, avatar, sig),
                new Host(new Uri(navigationManager.Uri).Host)
            ));
            response.EnsureSuccessStatusCode();
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });

            return;
        }

        navigationManager.NavigateTo("/");
    }
}
