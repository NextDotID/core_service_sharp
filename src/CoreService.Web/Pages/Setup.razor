@page "/setup"
@using System.ComponentModel.DataAnnotations;
@using CoreService.Shared.Internals;
@using Nethereum.Hex.HexConvertors.Extensions;
@using Nethereum.Signer;
@using Nethereum.UI;
@using System.Text;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject SelectedEthereumHostProviderService selectedHostProviderService

<PageTitle>Setup | Core Service</PageTitle>

<div class="h-32"></div>
<div class="grid w-full justify-center place-items-center">
    <MudText Typo="Typo.h5" Class="font-bold text-black">Welcome to Next.ID Core Service</MudText>
    <div class="h-12"></div>
    <MudText Typo="Typo.body2" Class="text-black">Connect with Metamask to setup your own VPS</MudText>
    <div class="h-6"></div>
    <MudButton Variant="Variant.Filled"
               Color="Color.Surface"
               StartIcon="@CustomIcons.Metamask"
               DisableRipple="@true"
               Class="flex w-80 bg-white capitalize text-black"
               IconClass="flex-none"
               OnClick="Connect">
        <span class="flex-1">Connect Wallet</span>
    </MudButton>
</div>

@code {
    private IEthereumHostProvider eth = null!;
    private string SelectedAccount { get; set; } = null!;

    protected override void OnInitialized()
    {
        eth = selectedHostProviderService.SelectedHost;
    }

    protected override async Task OnInitializedAsync()
    {
        if (await CheckSetupAsync())
        {
            navigationManager.NavigateTo("/");
            return;
        }

        await eth.CheckProviderAvailabilityAsync();
    }

    private async Task<bool> CheckSetupAsync()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<SetupStatus>("/api/core/status");
            return response?.IsInitialized ?? false;
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });
        }

        return false;
    }

    private async Task Connect()
    {
        string subPub;

        try
        {
            using var response = await httpClient.PostAsync("/api/core/generate", null);
            response.EnsureSuccessStatusCode();
            var status = await response.Content.ReadFromJsonAsync<SetupStatus>();
            subPub = status?.SubkeyPublic ?? string.Empty;
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });

            return;
        }

        var message = $"Subkey certification signature: {subPub}";
        string account, sig;

        try
        {
            account = await eth.GetProviderSelectedAccountAsync();
            sig = await eth.SignMessageAsync(message);
        }
        catch (Exception)
        {
            Snackbar.Add("Metamask not working...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });

            return;
        }

        var signer = new EthereumMessageSigner();
        var avatar = EthECKey.RecoverFromSignature(
                MessageSigner.ExtractEcdsaSignature(sig),
                signer.HashPrefixedMessage(Encoding.UTF8.GetBytes(message)))
            .GetPubKey(true)
            .ToHex(true);

        try
        {
            using var response = await httpClient.PostAsJsonAsync("/api/core/setup", new Internal(
                new Subkey(string.Empty, string.Empty, avatar, sig),
                new Host(new Uri(navigationManager.Uri).Host)
            ));
            response.EnsureSuccessStatusCode();
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });

            return;
        }

        navigationManager.NavigateTo("/");
    }
}
