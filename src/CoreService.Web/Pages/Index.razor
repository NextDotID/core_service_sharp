@page "/"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Dashboard | Core Service</PageTitle>

<div class="h-12"></div>
<div class="flex items-center justify-between">
    <div class="flex items-center">
        <p class="font-semibold text-base text-black">Services</p>
        &nbsp;
        <MudText>(@Services.Count().ToString())</MudText>
    </div>
    <MudMenu AnchorOrigin="Origin.BottomRight">
        <ActivatorContent>
            <MudButton Class="w-32 rounded bg-gray-200 hover:bg-gray-300"
                        DisableRipple="@true">
                <span class="capitalize">Create</span>
            </MudButton>
        </ActivatorContent>
        <ChildContent>
            <MudMenuItem Class="flex bg-white hover:bg-white py-0">
                <MudButton Variant="Variant.Text"
                            Class="rounded-lg py-2 hover:bg-gray-200 w-full justify-start"
                            DisableRipple="@true">
                    <span class="text-sm text-gray-700 normal-case">Import from your template</span>
                </MudButton>
            </MudMenuItem>
            <MudMenuItem Class="flex bg-white hover:bg-white py-0">
                <MudButton Variant="Variant.Text"
                            Class="rounded-lg py-2 hover:bg-gray-200 w-full justify-start"
                            DisableRipple="@true">
                    <span class="text-sm text-gray-700 normal-case self-start">Clone from Marketplace</span>
                </MudButton>
            </MudMenuItem>
        </ChildContent>
    </MudMenu>
</div>
<div class="h-4"></div>
@foreach (var service in Services)
{
    <div class="flex w-full h-20 rounded-lg shadow bg-white place-items-center">
        <MudText Typo="Typo.subtitle1" Class="ml-16 font-semibold text-black capitalize">@service.Name</MudText>
        <div class="w-24"></div>
        <MudText Typo="Typo.body2" Class="ml-18">@(service.Name).@Hostname</MudText>
        <MudSpacer></MudSpacer>
        <MudIcon Icon="@Icons.Material.Filled.Circle" Class="w-3 h-3" Color="(service.IsRunning ? Color.Success: Color.Error)" />
        <MudText Class="ml-2">@(service.IsRunning ? "Running": "Stopped")</MudText>
        <div class="w-48"></div>
        <div>
            <MudIconButton Icon="@(service.IsRunning ? Icons.Material.Outlined.PauseCircle : Icons.Material.Outlined.NotStarted)"
                            Color="Color.Dark"
                            DisableRipple="@true">
            </MudIconButton>
            <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                            Color="Color.Dark"
                            DisableRipple="@true">
            </MudIconButton>
            <MudIconButton Icon="@Icons.Material.Outlined.Settings"
                            Color="Color.Dark"
                            DisableRipple="@true">
            </MudIconButton>
            <style>
                .mud-icon-button {
                    padding: 0.5em;
                }
            </style>
        </div>
        <div class="mr-4"></div>
    </div>
    <div class="h-8"></div>
}

@code {
    private IEnumerable<ServiceStatus> Services { get; set; } = Array.Empty<ServiceStatus>();
    private string Hostname => new Uri(navigationManager.BaseUri).Host;

    protected override async Task OnInitializedAsync()
    {
        if (!await CheckSetupAsync())
        {
            navigationManager.NavigateTo("/setup");
            return;
        }

        await LoadAsync();
    }

    private async Task<bool> CheckSetupAsync()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<SetupStatus>("/api/core/status");
            return response?.IsInitialized ?? false;
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });
        }

        return false;
    }

    private async Task LoadAsync()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<ServicesResponse>("/api/service");
            Services = response?.Services ?? Array.Empty<ServiceStatus>();
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });
        }

        StateHasChanged();
    }

    private async Task ToggleService(ServiceStatus service)
    {
        var url = $"/api/service/{service.Name}/{(service.IsRunning ? "stop" : "start")}";
        try
        {
            await httpClient.PostAsync(url, null);
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });
        }

        // Refresh.
        await LoadAsync();
    }

    private async Task RemoveService(ServiceStatus service)
    {
        try
        {
            await httpClient.PostAsync($"/api/service/{service.Name}/down", null);
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });
        }

        // Refresh.
        await LoadAsync();
    }
}
