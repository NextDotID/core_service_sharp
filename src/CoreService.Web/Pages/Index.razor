@page "/"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Dashboard | Core Service</PageTitle>

@if (loaded)
{
<MudTable
          Hover="true"
          Items="@List"
          SortLabel="Sort By"
          T="ServiceStatus">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Services</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ServiceStatus, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ServiceStatus, object>(x => x.IsRunning)">Running</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@Uri.UnescapeDataString(context.Name)</MudTd>
            <MudTd DataLabel="Running">@(context.IsRunning ? "Yes" : "No")</MudTd>
            <MudTd DataLabel="Actions">
                <MudButtonGroup Variant="Variant.Outlined">
                        <MudToggleIconButton
                            Icon="@Icons.Material.Filled.Stop"
                            Color="Color.Warning"
                            ToggledIcon="@Icons.Material.Filled.Start"
                            ToggledColor="@Color.Success"
                            Toggled="@context.IsRunning"
                            ToggledChanged="@(() => ToggleService(context))">
                        </MudToggleIconButton>
                        <MudIconButton
                            Icon="@Icons.Material.Filled.Delete"
                            Color="Color.Error"
                            OnClick="@(() => RemoveService(context))">
                        </MudIconButton>
                        <MudIconButton
                            Icon="@Icons.Material.Filled.QueryStats"
                            Color="Color.Info"
                            OnClick="@(() => navigationManager.NavigateTo("/todo/service-stats"))">
                        </MudIconButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{ 10, 20, 50, 100 }" />
        </PagerContent>
    </MudTable>
}
else
{
    <MudSkeleton Class="" />
    <MudSkeleton Class="my-4" SkeletonType="SkeletonType.Circle" Width="50px" Height="50px" />
    <MudSkeleton Class="" SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
}

@code {
    private bool loaded = false;
    private string searchString = "";
    private IEnumerable<ServiceStatus> List { get; set; } = Array.Empty<ServiceStatus>();

    protected override async Task OnInitializedAsync()
    {
        Breadcrumbs.SetItems(new BreadcrumbItem("Dashboard", "/", true, Icons.Material.Filled.Dashboard));
        StateHasChanged();

        if (!await CheckSetupAsync())
        {
            navigationManager.NavigateTo("/setup");
            return;
        }

        await LoadListAsync();
    }

    private async Task<bool> CheckSetupAsync()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<SetupStatus>("/api/core/status");
            Console.WriteLine(response);
            return response?.IsInitialized ?? false;
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });
        }

        return false;
    }

    private async Task LoadListAsync()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<ServicesResponse>("/api/service");
            List = response?.Services ?? Array.Empty<ServiceStatus>();
            loaded = true;
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });
        }
    }

    private async Task ToggleService(ServiceStatus service)
    {
        // Refresh.
        await LoadListAsync();
    }

    private async Task RemoveService(ServiceStatus service)
    {
        // Refresh.
        await LoadListAsync();
    }

    private bool FilterFunc(ServiceStatus status) =>
        string.IsNullOrWhiteSpace(searchString) || status.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
}
