@page "/new/custom"
@using System.ComponentModel.DataAnnotations;
@using CoreService.Shared.Injectors;
@inject HttpClient httpClient;
@inject NavigationManager navigationManager;

<PageTitle>New Service | Core Service</PageTitle>

<div class="h-32"></div>
<div class="grid w-full place-items-center">
    <div class="w-2/5 place-items-start">
        <MudText Typo="Typo.h5" Class="font-semibold text-black justify-self-start">Create new service</MudText>
        <div class="h-1"></div>
        <MudText Typo="Typo.body2" Class="text-gray-700">Please follow the steps to configure your project and deploy it.</MudText>
        <div class="h-8"></div>

        <EditForm EditContext="editContext">
            <DataAnnotationsValidator />
            <span class="text-gray-700">Service name</span><br/>
            <div class="h-2"></div>
            <InputText id="name" @bind-Value="model.Name" class="w-full h-9 rounded shadow p-2 focus:ring"></InputText>
            <div class="h-6"></div>
            <span class="text-gray-700">Manifest URL</span><br />
            <div class="h-2"></div>
            <InputText id="manifest" @bind-Value="model.Manifest" class="w-full h-9 rounded shadow p-2 focus:ring"></InputText>
            <div class="h-10"></div>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Surface"
                       Disabled="@loading"
                       DisableRipple="@true"
                       OnClick="GetLoading"
                       Class="w-full bg-black text-white hover:bg-gray-700">
                @if (loading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <span class="normal-case ms-2">Processing</span>
                }
                else
                {
                    <span class="normal-case">Create</span>
                }
            </MudButton>
            <style>
                :focus-visible {
                    outline-width: 0px;
                }
            </style>
        </EditForm>
    </div>
</div>

@code {
    private bool loading = false;
    // After POST /prepare.
    private bool prepared = false;
    private List<PromptPoint> Injections { get; set; } = new List<PromptPoint>();
    private List<PromptEntry> Prompts { get; set; } = new List<PromptEntry>();

    private CreateServiceForm model = new();
    private EditContext editContext = null!;
    private PromptEntry entryBeforeEdit = null!;

    private async Task GetLoading()
    {
        loading = true;
        await Task.Delay(3000);
        loading = false;
    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(model);
    }

    private async Task Prepare()
    {
        if (!editContext.Validate())
        {
            StateHasChanged();
            return;
        }

        loading = true;
        try
        {
            using var respMsg = await httpClient.PostAsJsonAsync($"/api/service/{model.Name}/prepare", new PreparePayload(model.Manifest));
            respMsg.EnsureSuccessStatusCode();

            var result = await respMsg.Content.ReadFromJsonAsync<PrepareResponse>();
            Injections = result?.Injections.Where(p => p is PromptPoint).Select(p => (p as PromptPoint)!).ToList() ?? Injections;
            Prompts = Injections.Select(p => new PromptEntry { Key = p.Key, Value = string.Empty }).ToList();
            prepared = true;
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });
        }
        finally
        {
            loading = false;
        }
    }

    private async Task Build()
    {
        if (Prompts.Any(p => string.IsNullOrEmpty(p.Value)))
        {
            Snackbar.Add("Invalid input...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.Error;
            });
            return;
        }

        try
        {
            using var respMsg = await httpClient.PostAsJsonAsync($"/api/service/{model.Name}/create", new CreatePayload(Prompts.ToDictionary(p => p.Key, p => p.Value)));
            respMsg.EnsureSuccessStatusCode();

            Snackbar.Add("You've created a new service...", Severity.Success, options =>
            {
                options.Icon = Icons.Material.Filled.ElectricalServices;
            });
            navigationManager.NavigateTo("/");
        }
        catch (Exception)
        {
            Snackbar.Add("Something happened (server-side)...", Severity.Error, options =>
            {
                options.Icon = Icons.Material.Filled.WifiTetheringError;
            });
        }
    }

    private void BackupItem(object item)
    {
        var prompt = (PromptEntry)item;
        entryBeforeEdit = new()
        {
            Key = prompt.Key,
            Value = prompt.Value,
        };
    }

    private void RestoreItem(object item)
    {
        ((PromptEntry)item).Value = entryBeforeEdit.Value;
    }

    public class CreateServiceForm
    {
        [Required(ErrorMessage = "Service name is required!")]
        [StringLength(200, MinimumLength = 4, ErrorMessage = "Service name must be at least 4 characters long!")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Manifest URL is required!")]
        [Url(ErrorMessage = "Manifest URL must be valid!")]
        public string Manifest { get; set; } = string.Empty;
    }

    public class PromptEntry
    {
        public string Key { get; set; } = string.Empty;

        [Required(ErrorMessage = "Value is required!")]
        public string Value { get; set; } = string.Empty;
    }
}
